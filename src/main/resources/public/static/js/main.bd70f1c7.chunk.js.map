{"version":3,"sources":["logo.svg","components/LeafletComponent.js","components/FormComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","L","window","polyUtil","require","LeafletComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","startLocationPopup","endLocationPopup","state","nextProps","popupOptions","closeOnClick","autoClose","startLocation","mymap","removeLayer","popup","setLatLng","setContent","openOn","endLocation","findRouteResultRev","plotFindRoutesResponse","findRouteResult","result","randomColor","r","Math","floor","random","route","directions","routes","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","legs","Symbol","iterator","next","done","leg","value","legColor","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","steps","s","polyline","decode","points","leaftletPolyline","color","addLayer","bindTooltip","err","return","_this2","map","setView","tileLayer","maxZoom","attribution","id","addTo","on","e","handleClickOnMap","latlng","react_default","a","createElement","Component","FormComponent","checkedCheckboxes","awaitingForStartLocation","awaitingForEndLocation","lastMapClickCoords","setState","notifyNewStartLocation","notifyNewEndLocation","name","type","onClick","ev","checked","slice","target","push","index","indexOf","splice","htmlFor","_this3","data","placesOfInterest","fetch","method","body","JSON","stringify","headers","Accept","Content-Type","then","response","json","notifyFindRouteResult","_this4","handleNewStartLocation","handleNewEndLocation","style","renderStartEndTripLocationsInput","renderCheckbox","renderFindRoutesButton","App","rev","res","parse","display","marginRight","LeafletComponent_LeafletComponent","bind","width","FormComponent_FormComponent","handleFindRouteResult","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qKCKlCC,eAAIC,OAAOD,GAEbE,EAAWC,EAAQ,IAEFC,cAMjB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,mBAAqB,KAC1BP,EAAKQ,iBAAmB,KACxBR,EAAKS,MAAQ,GAJET,yFAOOU,GAEtB,IAAMC,EAAe,CACjBC,cAAc,EACdC,WAAW,GAGZV,KAAKJ,MAAMe,gBAAkBJ,EAAUI,gBACR,MAA3BX,KAAKI,oBACJJ,KAAKY,MAAMC,YAAYb,KAAKI,oBAEhCJ,KAAKI,mBAAqB,IAAIb,EAAEuB,MAAMN,GAC7BO,UAAUR,EAAUI,eACpBK,WAAW,kBACpBhB,KAAKI,mBAAmBa,OAAOjB,KAAKY,QAGrCZ,KAAKJ,MAAMsB,cAAgBX,EAAUW,cACR,MAAzBlB,KAAKK,kBACJL,KAAKY,MAAMC,YAAYb,KAAKK,kBAEhCL,KAAKK,iBAAmB,IAAId,EAAEuB,MAAMN,GAC3BO,UAAUR,EAAUW,aACpBF,WAAW,gBACpBhB,KAAKK,iBAAiBY,OAAOjB,KAAKY,QAInCZ,KAAKJ,MAAMuB,oBAAsBZ,EAAUY,oBAE1CnB,KAAKoB,uBAAuBb,EAAUc,gEAKvBC,GAEnB,IAAIC,EAAc,WACd,IACIC,EAAI,iBADS,mBACMC,KAAKC,MAAsB,GAAhBD,KAAKE,YACvC,MAAO,IAAMH,IAAMA,IAAMA,KAGzBI,EAAQN,EAAOO,WAAWC,OAAO,GARVC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAU3B,QAAAC,EAAAC,EAAeR,EAAMS,KAArBC,OAAAC,cAAAR,GAAAI,EAAAC,EAAAI,QAAAC,MAAAV,GAAA,EAA2B,KAAnBW,EAAmBP,EAAAQ,MAEnBC,EAAWrB,IAFQsB,GAAA,EAAAC,GAAA,EAAAC,OAAAb,EAAA,IAIvB,QAAAc,EAAAC,EAAaP,EAAIQ,MAAjBZ,OAAAC,cAAAM,GAAAG,EAAAC,EAAAT,QAAAC,MAAAI,GAAA,EAAwB,KAAhBM,EAAgBH,EAAAL,MAChBS,EAAW3D,EAAS4D,OAAOF,EAAEC,SAASE,OAAQ,GAE9CC,EAAmB,IAAIhE,EAAE6D,SAASA,EAAU,CAACI,MAAOZ,IAExD5C,KAAKY,MAAM6C,SAASF,GAEpBA,EAAiBG,YAAY,mCAAqCd,IAX/C,MAAAe,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,KAVA,MAAAY,GAAA3B,GAAA,EAAAC,EAAA0B,EAAA,YAAA5B,GAAA,MAAAK,EAAAwB,QAAAxB,EAAAwB,SAAA,WAAA5B,EAAA,MAAAC,gDA2BZ,IAAA4B,EAAA7D,KAEfA,KAAKY,MAAQrB,EAAEuE,IAAI,mBAAmBC,QAAQ,CAAC,QAAS,KAAO,IAE/DxE,EAAEyE,UAAU,6JAA8J,CACtKC,QAAS,GACTC,YAAa,6NAGbC,GAAI,mBACLC,MAAMpE,KAAKY,OAMdZ,KAAKY,MAAMyD,GAAG,QAJG,SAACC,GACdT,EAAKjE,MAAM2E,iBAAiBD,EAAEE,2CAQlC,OAAOC,EAAAC,EAAAC,cAAA,OAAKR,GAAG,2BAhGuBS,aCNzBC,cAIjB,SAAAA,EAAYjF,GAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA6E,IACrBhF,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA+E,GAAA1E,KAAAH,KAAMJ,KACDU,MAAQ,CACTwE,kBAAmB,GACnBnE,cAAe,KACfoE,0BAA0B,EAC1B7D,YAAa,KACb8D,wBAAwB,GAPPnF,yFAWCU,GACnBP,KAAKM,MAAMV,QAAUW,EAAU0E,qBAE3BjF,KAAKM,MAAMyE,2BACV/E,KAAKkF,SAAS,CACVH,0BAA0B,EAC1BpE,cAAeJ,EAAU0E,qBAE7BjF,KAAKJ,MAAMuF,uBAAuB5E,EAAU0E,qBAG7CjF,KAAKM,MAAM0E,yBACVhF,KAAKkF,SAAS,CACVF,wBAAwB,EACxB9D,YAAaX,EAAU0E,qBAE3BjF,KAAKJ,MAAMwF,qBAAqB7E,EAAU0E,6DAMvCI,GAAc,IAAAxB,EAAA7D,KAazB,MAAO,CACHyE,EAAAC,EAAAC,cAAA,SAAOW,KAAK,WAAWnB,GAAIkB,EAAMA,KAAMA,EAAM1C,MAAO0C,EAAME,QAbjD,SAACC,GACV,IAAIC,EAAU5B,EAAKvD,MAAMwE,kBAAkBY,QAC3C,GAAGF,EAAGG,OAAOF,QACTA,EAAQG,KAAKP,OACV,CACH,IAAIQ,EAAQJ,EAAQK,QAAQT,GAC5BI,EAAQM,OAAOF,EAAO,GAE1BhC,EAAKqB,SAAS,CACVJ,kBAAmBW,OAKvBhB,EAAAC,EAAAC,cAAA,SAAOqB,QAASX,GAAOA,GACvBZ,EAAAC,EAAAC,cAAA,6DAIiB,IAAAsB,EAAAjG,KAsBrB,OAAOyE,EAAAC,EAAAC,cAAA,UAAQW,KAAK,SAASC,QArBlB,WACP,IAAIW,EAAO,CACPC,iBAAkBF,EAAK3F,MAAMwE,kBAC7BnE,cAAesF,EAAK3F,MAAMK,cAC1BO,YAAa+E,EAAK3F,MAAMY,aAE5BkF,MAAM,uBAAwB,CAC1BC,OAAQ,OACRC,KAAMC,KAAKC,UAAUN,GACrBO,QAAS,CACHC,OAAU,mBACVC,eAAgB,sBAGrBC,KAAK,SAACC,GACH,OAAOA,EAASC,SAEnBF,KAAK,SAACC,GACHZ,EAAKrG,MAAMmH,sBAAsBF,OAGtC,sFAGwB,IAAAG,EAAAhH,KAC3BiH,EAAyB,WACzBD,EAAK9B,SAAS,CACVH,0BAA0B,EAC1BC,wBAAwB,KAI5BkC,EAAuB,WACvBF,EAAK9B,SAAS,CACVF,wBAAwB,EACxBD,0BAA0B,KAIlC,MAAO,CACHN,EAAAC,EAAAC,cAAA,6CAC4B,MAA5B3E,KAAKM,MAAMK,cACP8D,EAAAC,EAAAC,cAAA,KAAGwC,MAAO,CAAC3D,MAAO,QAAlB,uCAEAiB,EAAAC,EAAAC,cAAA,SAAI4B,KAAKC,UAAUxG,KAAKM,MAAMK,gBAEN,MAA5BX,KAAKM,MAAMK,cACP8D,EAAAC,EAAAC,cAAA,UAAQW,KAAK,SAASC,QAAS0B,GAA/B,2BAEAxC,EAAAC,EAAAC,cAAA,UAAQW,KAAK,SAASC,QAAS0B,GAA/B,yBAEJxC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,2CAC0B,MAA1B3E,KAAKM,MAAMY,YACPuD,EAAAC,EAAAC,cAAA,KAAGwC,MAAO,CAAC3D,MAAO,QAAlB,qCAEAiB,EAAAC,EAAAC,cAAA,SAAI4B,KAAKC,UAAUxG,KAAKM,MAAMY,cAER,MAA1BlB,KAAKM,MAAMY,YACPuD,EAAAC,EAAAC,cAAA,UAAQW,KAAK,SAASC,QAAS2B,GAA/B,yBAEAzC,EAAAC,EAAAC,cAAA,UAAQW,KAAK,SAASC,QAAS2B,GAA/B,uBAEJzC,EAAAC,EAAAC,cAAA,6CAMJ,OAAOF,EAAAC,EAAAC,cAAA,YACF3E,KAAKoH,mCACLpH,KAAKqH,eAAe,eACpBrH,KAAKqH,eAAe,iBACpBrH,KAAKqH,eAAe,WACpBrH,KAAKsH,iCArIyB1C,aC6E5B2C,cAlEX,SAAAA,EAAY3H,GAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAuH,IACrB1H,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyH,GAAApH,KAAAH,KAAMJ,KACDU,MAAQ,CACT2E,mBAAoB,KACpBtE,cAAe,KACfO,YAAa,KACbG,gBAAiB,KACjBF,mBAAoB,GAPHtB,gFAWR2E,GACbxE,KAAKkF,SAAS,CACVD,mBAAoBT,mDAILA,GACnBxE,KAAKkF,SAAS,CACVvE,cAAe6D,iDAIFA,GACjBxE,KAAKkF,SAAS,CACVhE,YAAasD,kDAIClD,GAClB,IAAIkG,EAAMxH,KAAKM,MAAMa,mBAAqB,EACtCsG,EAAM,CACN5F,WAAY0E,KAAKmB,MAAMpG,EAAOO,aAElC7B,KAAKkF,SAAS,CACV7D,gBAAiBoG,EACjBtG,mBAAoBqG,qCAKxB,OAAQ/C,EAAAC,EAAAC,cAAA,WACLF,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,OAAKwC,MAAO,CAACQ,QAAQ,eAAgBC,YAAY,SAC7CnD,EAAAC,EAAAC,cAACkD,EAAD,CACKtD,iBAAkBvE,KAAKuE,iBAAiBuD,KAAK9H,MAC7CW,cAAeX,KAAKM,MAAMK,cAC1BO,YAAalB,KAAKM,MAAMY,YACxBG,gBAAiBrB,KAAKM,MAAMe,gBAC5BF,mBAAoBnB,KAAKM,MAAMa,sBAGxCsD,EAAAC,EAAAC,cAAA,OAAKwC,MAAO,CAACQ,QAAQ,eAAgBI,MAAO,UACxCtD,EAAAC,EAAAC,cAACqD,EAAD,CACK/C,mBAAoBjF,KAAKM,MAAM2E,mBAC/BE,uBAAwBnF,KAAKiH,uBAAuBa,KAAK9H,MACzDoF,qBAAsBpF,KAAKkH,qBAAqBY,KAAK9H,MACrD+G,sBAAuB/G,KAAKiI,sBAAsBH,KAAK9H,kBA/D7D4E,aCGEsD,QACW,cAA7B1I,OAAO2I,SAASC,UAEe,UAA7B5I,OAAO2I,SAASC,UAEhB5I,OAAO2I,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,KAAK,SAAAkC,GACjCA,EAAaC","file":"static/js/main.bd70f1c7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\n\n\n// Leaflet sources from CDN\nimport './LeafletComponent.css';\nconst L = window.L;\n\nvar polyUtil = require('polyline-encoded');\n\nexport default class LeafletComponent extends Component {\n\n    mymap: any;\n    startLocationPopup: any;\n    endLocationPopup: any;\n\n    constructor(props) {\n        super(props);\n        this.startLocationPopup = null;\n        this.endLocationPopup = null;\n        this.state = { };\n    }\n\n    componentWillReceiveProps(nextProps) {\n\n        const popupOptions = {\n            closeOnClick: false,\n            autoClose: false\n        };\n\n        if(this.props.startLocation !== nextProps.startLocation) {\n            if(this.startLocationPopup != null) {\n                this.mymap.removeLayer(this.startLocationPopup)\n            }\n            this.startLocationPopup = new L.popup(popupOptions)\n                    .setLatLng(nextProps.startLocation)\n                    .setContent('Start location');\n            this.startLocationPopup.openOn(this.mymap);\n        }\n\n        if(this.props.endLocation !== nextProps.endLocation) {\n            if(this.endLocationPopup != null) {\n                this.mymap.removeLayer(this.endLocationPopup)\n            }\n            this.endLocationPopup = new L.popup(popupOptions)\n                    .setLatLng(nextProps.endLocation)\n                    .setContent('End location');\n            this.endLocationPopup.openOn(this.mymap);\n        }\n\n\n        if(this.props.findRouteResultRev != nextProps.findRouteResultRev) {\n\n            this.plotFindRoutesResponse(nextProps.findRouteResult);\n\n        }\n    }\n\n    plotFindRoutesResponse(result) {\n\n        let randomColor = () => {\n            const possible = \"0123456789abcdef\";\n            let r = () => possible[Math.floor(Math.random() * 16)];\n            return \"#\" + r() + r() + r();\n        }\n\n        let route = result.directions.routes[0];\n\n        for(let leg of route.legs) {\n\n            let legColor = randomColor();\n\n            for(let s of leg.steps) {\n                var polyline = polyUtil.decode(s.polyline.points, 5);\n\n                var leaftletPolyline = new L.polyline(polyline, {color: legColor});\n\n                this.mymap.addLayer(leaftletPolyline);\n\n                leaftletPolyline.bindTooltip(\"TODO Polyline  tooltip content: \" + legColor);\n            }\n        }\n    }\n\n\n    componentDidMount(){\n//        this.mymap = L.map('leaftlet-map-id').setView([52.218994864793, 21.011712029573467], 17); // coordsy elki\n        this.mymap = L.map('leaftlet-map-id').setView([51.505, -0.09], 13);\n\n        L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw', {\n            maxZoom: 18,\n            attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\n                '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\n                'Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n            id: 'mapbox.streets'\n        }).addTo(this.mymap);\n\n        let onMapClick = (e) => {\n            this.props.handleClickOnMap(e.latlng);\n        }\n\n        this.mymap.on('click', onMapClick);\n    }\n\n\n    render() {\n        return <div id=\"leaftlet-map-id\" />;\n    }\n}\n\n","/* @flow */\nimport React, { Component } from 'react';\n\nexport default class FormComponent extends Component {\n    props: Props;\n    state: State;\n\n    constructor(props: Props){\n        super(props);\n        this.state = {\n            checkedCheckboxes: [],\n            startLocation: null,\n            awaitingForStartLocation: false,\n            endLocation: null,\n            awaitingForEndLocation: false,\n        }\n    }\n\n    componentWillReceiveProps(nextProps:  Props) {\n        if(this.state.props !== nextProps.lastMapClickCoords){\n\n            if(this.state.awaitingForStartLocation) {\n                this.setState({\n                    awaitingForStartLocation: false,\n                    startLocation: nextProps.lastMapClickCoords\n                });\n                this.props.notifyNewStartLocation(nextProps.lastMapClickCoords);\n            }\n\n            if(this.state.awaitingForEndLocation) {\n                this.setState({\n                    awaitingForEndLocation: false,\n                    endLocation: nextProps.lastMapClickCoords\n                });\n                this.props.notifyNewEndLocation(nextProps.lastMapClickCoords);\n            }\n        }\n\n    }\n\n    renderCheckbox(name: string) {\n        let handle = (ev) => {\n            let checked = this.state.checkedCheckboxes.slice()\n            if(ev.target.checked) {\n                checked.push(name);\n            } else {\n                let index = checked.indexOf(name);\n                checked.splice(index, 1);\n            }\n            this.setState({\n                checkedCheckboxes: checked\n            });\n        }\n        return [\n            <input type=\"checkbox\" id={name} name={name} value={name} onClick={handle}/>,\n            <label htmlFor={name}>{name}</label>,\n            <br />\n        ];\n    }\n\n    renderFindRoutesButton() {\n        let send = () => {\n            let data = {\n                placesOfInterest: this.state.checkedCheckboxes,\n                startLocation: this.state.startLocation,\n                endLocation: this.state.endLocation\n            }\n            fetch('/api/maps/find_route', {\n                method: 'POST',\n                body: JSON.stringify(data),\n                headers: {\n                      'Accept': 'application/json',\n                      'Content-Type': 'application/json'\n                },\n            })\n                .then((response) => {\n                    return response.json();\n                })\n                .then((response) => {\n                    this.props.notifyFindRouteResult(response);\n                });\n        }\n        return <button type=\"button\" onClick={send}>Ok - find optimal route</button>\n    }\n\n    renderStartEndTripLocationsInput() {\n        let handleNewStartLocation = () => {\n            this.setState({\n                awaitingForStartLocation: true,\n                awaitingForEndLocation: false,\n            });\n        }\n\n        let handleNewEndLocation = () => {\n            this.setState({\n                awaitingForEndLocation: true,\n                awaitingForStartLocation: false,\n            });\n        }\n\n        return [\n            <p>Your trip start-point location: </p>,\n            this.state.startLocation == null ?\n                <p style={{color: 'red'}}>You havent set your start location!</p>\n                :\n                <p>{JSON.stringify(this.state.startLocation)}</p>\n            ,\n            this.state.startLocation == null ?\n                <button type=\"button\" onClick={handleNewStartLocation}>Set your start position</button>\n                :\n                <button type=\"button\" onClick={handleNewStartLocation}>Update start position</button>\n            ,\n            <br />,\n            <hr />,\n            <p>Your trip end-point location: </p>,\n            this.state.endLocation == null ?\n                <p style={{color: 'red'}}>You havent set your end location!</p>\n                :\n                <p>{JSON.stringify(this.state.endLocation)}</p>\n            ,\n            this.state.endLocation == null ?\n                <button type=\"button\" onClick={handleNewEndLocation}>Set your end position</button>\n                :\n                <button type=\"button\" onClick={handleNewEndLocation}>Update end position</button>\n            ,\n            <hr />,\n        ];\n    }\n\n\n    render(){\n        return <form>\n            {this.renderStartEndTripLocationsInput()}\n            {this.renderCheckbox('restaurants')}\n            {this.renderCheckbox('liquor stores')}\n            {this.renderCheckbox('museums')}\n            {this.renderFindRoutesButton()}\n        </form>;\n    }\n\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport LeafletComponent from './components/LeafletComponent.js';\nimport FormComponent from './components/FormComponent.js';\n\ntype FindRouteResult = {\n    directions: string,\n}\n\nclass App extends Component {\n\n    props: Props;\n    state: State;\n\n    constructor(props: Props){\n        super(props);\n        this.state = {\n            lastMapClickCoords: null,\n            startLocation: null,\n            endLocation: null,\n            findRouteResult: null,\n            findRouteResultRev: 0,\n        }\n    }\n\n    handleClickOnMap(latlng) {\n        this.setState({\n            lastMapClickCoords: latlng\n        });\n    }\n\n    handleNewStartLocation(latlng) {\n        this.setState({\n            startLocation: latlng\n        });\n    }\n\n    handleNewEndLocation(latlng) {\n        this.setState({\n            endLocation: latlng\n        });\n    }\n\n    handleFindRouteResult(result: FindRouteResult) {\n        let rev = this.state.findRouteResultRev + 1;\n        let res = {\n            directions: JSON.parse(result.directions)\n        }\n        this.setState({\n            findRouteResult: res,\n            findRouteResultRev: rev,\n        });\n    }\n\n    render() {\n        return  <div>\n           <h2> Title to be done </h2>\n           <span>\n               <div style={{display:'inline-block', marginRight:'20px'}}>\n                   <LeafletComponent\n                        handleClickOnMap={this.handleClickOnMap.bind(this)}\n                        startLocation={this.state.startLocation}\n                        endLocation={this.state.endLocation}\n                        findRouteResult={this.state.findRouteResult}\n                        findRouteResultRev={this.state.findRouteResultRev}\n                        />\n               </div>\n               <div style={{display:'inline-block', width: '600px'}}>\n                   <FormComponent\n                        lastMapClickCoords={this.state.lastMapClickCoords}\n                        notifyNewStartLocation={this.handleNewStartLocation.bind(this)}\n                        notifyNewEndLocation={this.handleNewEndLocation.bind(this)}\n                        notifyFindRouteResult={this.handleFindRouteResult.bind(this)}\n                         />\n               </div>\n           </span>\n        </div>;\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}