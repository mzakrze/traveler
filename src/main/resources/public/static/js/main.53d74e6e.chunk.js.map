{"version":3,"sources":["logo.svg","components/LeafletComponent.js","components/FormComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","L","window","LeafletComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","startLocationPopup","endLocationPopup","state","nextProps","popupOptions","closeOnClick","autoClose","startLocation","mymap","removeLayer","popup","setLatLng","setContent","openOn","endLocation","_this2","console","log","map","contextmenu","contextmenuWidth","contextmenuItems","text","callback","setView","tileLayer","maxZoom","attribution","id","addTo","marker","bindPopup","openPopup","on","e","handleClickOnMap","latlng","react_default","a","createElement","Component","FormComponent","checkedCheckboxes","awaitingForStartLocation","awaitingForEndLocation","lastMapClickCoords","setState","notifyNewStartLocation","notifyNewEndLocation","name","type","value","onClick","ev","checked","slice","target","push","index","indexOf","splice","htmlFor","_this3","data","placesOfInterest","fetch","method","body","JSON","stringify","then","response","json","myJson","_this4","handleNewStartLocation","handleNewEndLocation","style","color","renderStartEndTripLocationsInput","renderCheckbox","renderFindRoutesButton","App","display","marginRight","LeafletComponent_LeafletComponent","bind","width","FormComponent_FormComponent","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.53d74e6e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\n\n// Leaflet sources from CDN\nimport './LeafletComponent.css'; \nconst L = window.L;\n\nexport default class LeafletComponent extends Component {\n\n    mymap: any;\n    startLocationPopup: any;\n    endLocationPopup: any;\n\n    constructor(props) {\n        super(props);\n        this.startLocationPopup = null;\n        this.endLocationPopup = null;\n        this.state = { };\n    }\n\n    componentWillReceiveProps(nextProps) {\n\n        const popupOptions = {\n            closeOnClick: false,\n            autoClose: false\n        };\n\n        if(this.props.startLocation !== nextProps.startLocation) {\n            if(this.startLocationPopup != null) {\n                this.mymap.removeLayer(this.startLocationPopup)\n            }\n            this.startLocationPopup = new L.popup(popupOptions)\n                    .setLatLng(nextProps.startLocation)\n                    .setContent('Start location');\n            this.startLocationPopup.openOn(this.mymap);\n        }\n\n        if(this.props.endLocation !== nextProps.endLocation) {\n            if(this.endLocationPopup != null) {\n                this.mymap.removeLayer(this.endLocationPopup)\n            }\n            this.endLocationPopup = new L.popup(popupOptions)\n                    .setLatLng(nextProps.endLocation)\n                    .setContent('End location');\n            this.endLocationPopup.openOn(this.mymap);\n        }\n    }\n\n\n    componentDidMount(){\n        console.log('leaflet component componentdidmount')\n\n        this.mymap = L.map('leaftlet-map-id',{\n            contextmenu: true,\n            contextmenuWidth: 140,\n            contextmenuItems: [{\n                text: 'Show coordinates',\n                callback: () => {console.log('im in callback')}\n            }]\n\t    }).setView([51.505, -0.09], 13);\n\n        L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw', {\n            maxZoom: 18,\n            attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\n                '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\n                'Imagery Â© <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n            id: 'mapbox.streets'\n        }).addTo(this.mymap);\n\n        L.marker([51.5, -0.09]).addTo(this.mymap)\n            .bindPopup(\"<b>Hello world!</b><br />I am a popup.\").openPopup();\n\n        var popup = L.popup();\n\n        let onMapClick = (e) => {\n            this.props.handleClickOnMap(e.latlng);\n        }\n\n        this.mymap.on('click', onMapClick);\n    }\n\n\n    render() {\n        return <div id=\"leaftlet-map-id\">Hello there, its leaflet component</div>;\n    }\n}\n\n","/* @flow */\nimport React, { Component } from 'react';\n\nexport default class FormComponent extends Component {\n    props: Props;\n    state: State;\n\n    constructor(props: Props){\n        super(props);\n        this.state = {\n            checkedCheckboxes: [],\n            startLocation: null,\n            awaitingForStartLocation: false,\n            endLocation: null,\n            awaitingForEndLocation: false,\n        }\n    }\n\n    componentWillReceiveProps(nextProps:  Props) {\n        if(this.state.props !== nextProps.lastMapClickCoords){\n\n            if(this.state.awaitingForStartLocation) {\n                this.setState({\n                    awaitingForStartLocation: false,\n                    startLocation: nextProps.lastMapClickCoords\n                });\n                this.props.notifyNewStartLocation(nextProps.lastMapClickCoords);\n            }\n\n            if(this.state.awaitingForEndLocation) {\n                this.setState({\n                    awaitingForEndLocation: false,\n                    endLocation: nextProps.lastMapClickCoords\n                });\n                this.props.notifyNewEndLocation(nextProps.lastMapClickCoords);\n            }\n        }\n    }\n\n    renderCheckbox(name: string) {\n        let handle = (ev) => {\n            let checked = this.state.checkedCheckboxes.slice()\n            if(ev.target.checked) {\n                checked.push(name);\n            } else {\n                let index = checked.indexOf(name);\n                checked.splice(index, 1);\n            }\n            this.setState({\n                checkedCheckboxes: checked\n            });\n        }\n        return [\n            <input type=\"checkbox\" id={name} name={name} value={name} onClick={handle}/>,\n            <label htmlFor={name}>{name}</label>,\n            <br />\n        ];\n    }\n\n    renderFindRoutesButton() {\n        let send = () => {\n            let data = {\n                placesOfInterest: this.state.checkedCheckboxes,\n                startLocation: this.state.startLocation,\n                endLocation: this.state.endLocation\n            }\n            fetch('/api/stub/simple_map_req', {method: 'POST', body: JSON.stringify(data)})\n                .then(function(response) {\n                    return response.json();\n                })\n                .then(function(myJson) {\n                    console.log(JSON.stringify(myJson));\n                });\n        }\n        return <button type=\"button\" onClick={send}>Ok - find optimal route</button>\n    }\n\n    renderStartEndTripLocationsInput() {\n        let handleNewStartLocation = () => {\n            this.setState({\n                awaitingForStartLocation: true,\n                awaitingForEndLocation: false,\n            });\n        }\n\n        let handleNewEndLocation = () => {\n            this.setState({\n                awaitingForEndLocation: true,\n                awaitingForStartLocation: false,\n            });\n        }\n\n        return [\n            <p>Your trip start-point location: </p>,\n            this.state.startLocation == null ?\n                <p style={{color: 'red'}}>You havent set your start location!</p>\n                :\n                <p>{JSON.stringify(this.state.startLocation)}</p>\n            ,\n            this.state.startLocation == null ?\n                <button type=\"button\" onClick={handleNewStartLocation}>Set your start position</button>\n                :\n                <button type=\"button\" onClick={handleNewStartLocation}>Update start position</button>\n            ,\n            <br />,\n            <hr />,\n            <p>Your trip end-point location: </p>,\n            this.state.endLocation == null ?\n                <p style={{color: 'red'}}>You havent set your end location!</p>\n                :\n                <p>{JSON.stringify(this.state.endLocation)}</p>\n            ,\n            this.state.endLocation == null ?\n                <button type=\"button\" onClick={handleNewEndLocation}>Set your end position</button>\n                :\n                <button type=\"button\" onClick={handleNewEndLocation}>Update end position</button>\n            ,\n            <hr />,\n        ];\n    }\n\n\n    render(){\n        return <form>\n            {this.renderStartEndTripLocationsInput()}\n            {this.renderCheckbox('restaurants')}\n            {this.renderCheckbox('liquor stores')}\n            {this.renderCheckbox('museums')}\n            {this.renderFindRoutesButton()}\n        </form>;\n    }\n\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport LeafletComponent from './components/LeafletComponent.js';\nimport FormComponent from './components/FormComponent.js';\n\nclass App extends Component {\n\n    props: Props;\n    state: State;\n\n    constructor(props: Props){\n        super(props);\n        this.state = {\n            lastMapClickCoords: null,\n            startLocation: null,\n            endLocation: null,\n        }\n    }\n\n    handleClickOnMap(latlng) {\n        this.setState({\n            lastMapClickCoords: latlng\n        });\n    }\n\n    handleNewStartLocation(latlng) {\n        this.setState({\n            startLocation: latlng\n        });\n    }\n\n    handleNewEndLocation(latlng) {\n        this.setState({\n            endLocation: latlng\n        });\n    }\n\n    render() {\n        return  <div>\n           <h2> Title to be done </h2>\n           <span>\n               <div style={{display:'inline-block', marginRight:'20px'}}>\n                   <LeafletComponent\n                        handleClickOnMap={this.handleClickOnMap.bind(this)}\n                        startLocation={this.state.startLocation}\n                        endLocation={this.state.endLocation}\n                        />\n               </div>\n               <div style={{display:'inline-block', width: '600px'}}>\n                   <FormComponent\n                        lastMapClickCoords={this.state.lastMapClickCoords}\n                        notifyNewStartLocation={this.handleNewStartLocation.bind(this)}\n                        notifyNewEndLocation={this.handleNewEndLocation.bind(this)}\n                         />\n               </div>\n           </span>\n        </div>;\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}