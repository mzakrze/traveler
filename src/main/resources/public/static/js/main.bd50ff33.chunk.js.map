{"version":3,"sources":["logo.svg","components/LeafletComponent.js","components/FormComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","L","window","LeafletComponent","console","log","mymap","map","contextmenu","contextmenuWidth","contextmenuItems","text","callback","setView","tileLayer","maxZoom","attribution","id","addTo","marker","bindPopup","openPopup","circle","color","fillColor","fillOpacity","polygon","popup","on","e","setLatLng","latlng","setContent","toString","openOn","react_default","a","createElement","Component","FormComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","checkedCheckboxes","name","_this2","type","value","onClick","ev","checked","slice","target","push","index","indexOf","splice","setState","htmlFor","_this3","data","placesOfInterest","renderCheckbox","renderFindRoutesButton","App","style","display","marginRight","LeafletComponent_LeafletComponent","width","FormComponent_FormComponent","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bd50ff33.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\n\n// Leaflet sources from CDN\nimport './LeafletComponent.css'; \nconst L = window.L;\n\nexport default class LeafletComponent extends Component {\n\n    componentDidMount(){\n        console.log('leaflet component componentdidmount')\n\n        var mymap = L.map('leaftlet-map-id',{\n            contextmenu: true,\n            contextmenuWidth: 140,\n            contextmenuItems: [{\n                text: 'Show coordinates',\n                callback: () => {console.log('im in callback')}\n            }]\n\t    }).setView([51.505, -0.09], 13);\n\n        L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw', {\n            maxZoom: 18,\n            attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\n                '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\n                'Imagery Â© <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n            id: 'mapbox.streets'\n        }).addTo(mymap);\n\n        L.marker([51.5, -0.09]).addTo(mymap)\n            .bindPopup(\"<b>Hello world!</b><br />I am a popup.\").openPopup();\n\n        L.circle([51.508, -0.11], 500, {\n            color: 'red',\n            fillColor: '#f03',\n            fillOpacity: 0.5\n        }).addTo(mymap).bindPopup(\"I am a circle.\");\n\n        L.polygon([\n            [51.509, -0.08],\n            [51.503, -0.06],\n            [51.51, -0.047]\n        ]).addTo(mymap).bindPopup(\"I am a polygon.\");\n\n\n        var popup = L.popup();\n\n        function onMapClick(e) {\n            popup\n                .setLatLng(e.latlng)\n                .setContent(\"You clicked the map at \" + e.latlng.toString())\n                .openOn(mymap);\n        }\n\n        mymap.on('click', onMapClick);\n    }\n\n    render() {\n        return <div id=\"leaftlet-map-id\">Hello there, its leaflet component</div>;\n    }\n}\n\n","/* @flow */\nimport React, { Component } from 'react';\n\nexport default class FormComponent extends Component {\n    props: Props;\n    state: State;\n\n    constructor(props: Props){\n        super(props);\n        this.state = {\n            checkedCheckboxes: []\n        }\n    }\n\n    renderCheckbox(name: string) {\n        let handle = (ev) => {\n            let checked = this.state.checkedCheckboxes.slice()\n            if(ev.target.checked) {\n                checked.push(name);\n            } else {\n                let index = checked.indexOf(name);\n                checked.splice(index, 1);\n            }\n            this.setState({\n                checkedCheckboxes: checked\n            })\n        }\n        return [\n            <input type=\"checkbox\" id={name} name={name} value={name} onClick={handle}/>,\n            <label htmlFor={name}>{name}</label>,\n            <br />\n        ];\n    }\n\n    renderFindRoutesButton() {\n        let send = () => {\n            let data = {\n                placesOfInterest: this.state.checkedCheckboxes\n            }\n            // FIXME\n            console.log(data);\n        }\n        return <button type=\"button\" onClick={send}>Ok - find optimal route</button>\n    }\n\n    render(){\n        return <form>\n            {this.renderCheckbox('restaurants')}\n            {this.renderCheckbox('liquor stores')}\n            {this.renderCheckbox('museums')}\n            {this.renderFindRoutesButton()}\n        </form>;\n    }\n\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport LeafletComponent from './components/LeafletComponent.js';\nimport FormComponent from './components/FormComponent.js';\n\nclass App extends Component {\n    render() {\n        return  <div>\n           <h2> Title to be done </h2>\n           <span>\n               <div style={{display:'inline-block', marginRight:'20px'}}>\n                   <LeafletComponent />\n               </div>\n               <div style={{display:'inline-block', width: '600px'}}>\n                   <FormComponent />\n               </div>\n           </span>\n        </div>;\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}