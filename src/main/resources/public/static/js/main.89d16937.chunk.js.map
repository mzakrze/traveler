{"version":3,"sources":["logo.svg","components/LeafletComponent.js","components/FormComponent.js","components/ResultPresenterComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","L","window","polyUtil","require","LeafletComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","startLocationPopup","endLocationPopup","state","nextProps","popupOptions","closeOnClick","autoClose","startLocation","mymap","removeLayer","popup","setLatLng","setContent","openOn","endLocation","findRouteResultRev","plotFindRoutesResponse","findRouteResult","result","colorIndex","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","directions","Symbol","iterator","next","done","route","value","routes","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","legs","leg","legColor","getColor","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","steps","s","polyline","decode","points","leaftletPolyline","color","addLayer","bindTooltip","err","return","places","console","log","selectedPlaces","placesToVisitInOrder","map","e","id","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","results","r","includes","place_id","latlng","geometry","location","name","_this2","setView","tileLayer","maxZoom","attribution","addTo","on","handleClickOnMap","react_default","a","createElement","Component","SUPPORTED_PLACES_CODES","FormComponent","selectedPlacesTypes","acceptedTravelModes","awaitingForStartLocation","awaitingForEndLocation","startTimeHour","startTimeMinute","tripDuration","placesKeywords","lastMapClickCoords","setState","notifyNewStartLocation","notifyNewEndLocation","type","onClick","ev","checked","slice","target","push","index","indexOf","splice","htmlFor","_this3","msg","alert","validate","data","placesOfInterest","tripStart","hour","minute","travelModes","fetch","method","body","JSON","stringify","headers","Accept","Content-Type","then","response","json","error","notifyFindRouteResult","send","_this4","handleNewStartLocation","handleNewEndLocation","handleChange","key","defineProperty","renderTravelModeCheckbox","mode","style","onChange","parse","localStorage","getItem","stateJson","setItem","_this5","renderStartEndTripLocationsInput","height","overflow","place_code","renderCheckbox","renderFindRoutesButton","saveConfigToLocalStorage","bind","loadConfigFromLocalStorage","ResultPresenterComponent","singleStep","background-color","summery","letRes","distance","text","duration","onMouseEnter","onMouseLeave","concat","placeIdToName","filter","i","length","step","previousStepName","currentStepName","renderSingleStep","notifyChangeScreen","App","resultPresenterVisible","rev","d","res","colors","c","Math","floor","random","randomColor","formComponentStyleDisplay","resultPresenterStyleDisplay","display","marginRight","LeafletComponent_LeafletComponent","width","FormComponent_FormComponent","handleFindRouteResult","ResultPresenterComponent_ResultPresenterComponent","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qKCKlCC,eAAIC,OAAOD,GAEbE,EAAWC,EAAQ,IAIFC,cAMjB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,mBAAqB,KAC1BP,EAAKQ,iBAAmB,KACxBR,EAAKS,MAAQ,GAJET,yFAOOU,GAEtB,IAAMC,EAAe,CACjBC,cAAc,EACdC,WAAW,GAGZV,KAAKJ,MAAMe,gBAAkBJ,EAAUI,gBACR,MAA3BX,KAAKI,oBACJJ,KAAKY,MAAMC,YAAYb,KAAKI,oBAEhCJ,KAAKI,mBAAqB,IAAIb,EAAEuB,MAAMN,GAC7BO,UAAUR,EAAUI,eACpBK,WAAW,kBACpBhB,KAAKI,mBAAmBa,OAAOjB,KAAKY,QAGrCZ,KAAKJ,MAAMsB,cAAgBX,EAAUW,cACR,MAAzBlB,KAAKK,kBACJL,KAAKY,MAAMC,YAAYb,KAAKK,kBAEhCL,KAAKK,iBAAmB,IAAId,EAAEuB,MAAMN,GAC3BO,UAAUR,EAAUW,aACpBF,WAAW,gBACpBhB,KAAKK,iBAAiBY,OAAOjB,KAAKY,QAInCZ,KAAKJ,MAAMuB,oBAAsBZ,EAAUY,oBAE1CnB,KAAKoB,uBAAuBb,EAAUc,gEAOvBC,GACnB,IAAIC,EAAa,EADUC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAE3B,QAAAC,EAAAC,EAAsBP,EAAOQ,WAA7BC,OAAAC,cAAAR,GAAAI,EAAAC,EAAAI,QAAAC,MAAAV,GAAA,EAAyC,KAEjCW,EAFiCP,EAAAQ,MAEdC,OAAO,GAFOC,GAAA,EAAAC,GAAA,EAAAC,OAAAb,EAAA,IAIrC,QAAAc,EAAAC,EAAeP,EAAMQ,KAArBZ,OAAAC,cAAAM,GAAAG,EAAAC,EAAAT,QAAAC,MAAAI,GAAA,EAA2B,KAAnBM,EAAmBH,EAAAL,MAEnBS,EAAW7C,KAAKJ,MAAMkD,SAASvB,GACnCA,IAHuB,IAAAwB,GAAA,EAAAC,GAAA,EAAAC,OAAAtB,EAAA,IAKvB,QAAAuB,EAAAC,EAAaP,EAAIQ,MAAjBrB,OAAAC,cAAAe,GAAAG,EAAAC,EAAAlB,QAAAC,MAAAa,GAAA,EAAwB,KAAhBM,EAAgBH,EAAAd,MAChBkB,EAAW7D,EAAS8D,OAAOF,EAAEC,SAASE,OAAQ,GAE9CC,EAAmB,IAAIlE,EAAE+D,SAASA,EAAU,CAACI,MAAOb,IAExD7C,KAAKY,MAAM+C,SAASF,GAEpBA,EAAiBG,YAAY,mCAAqCf,IAZ/C,MAAAgB,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,KAJU,MAAAY,GAAAtB,GAAA,EAAAC,EAAAqB,EAAA,YAAAvB,GAAA,MAAAI,EAAAoB,QAAApB,EAAAoB,SAAA,WAAAvB,EAAA,MAAAC,KAFd,MAAAqB,GAAApC,GAAA,EAAAC,EAAAmC,EAAA,YAAArC,GAAA,MAAAK,EAAAiC,QAAAjC,EAAAiC,SAAA,WAAArC,EAAA,MAAAC,GA4B3B,IAAIqC,EAASzC,EAAOyC,OAEpBC,QAAQC,IAAIF,GACZC,QAAQC,IAAI3C,EAAO4C,eAAeC,qBAAqBC,IAAI,SAAAC,GAAC,OAAIA,EAAEC,MA/BvC,IAAAC,GAAA,EAAAC,GAAA,EAAAC,OAAA9C,EAAA,IAiC3B,QAAA+C,EAAAC,EAAaZ,EAAOa,QAApB7C,OAAAC,cAAAuC,GAAAG,EAAAC,EAAA1C,QAAAC,MAAAqC,GAAA,EAA6B,KAArBM,EAAqBH,EAAAtC,MAEfd,EAAO4C,eAAeC,qBAChC,GAAqF,GAAlF7C,EAAO4C,eAAeC,qBAAqBC,IAAI,SAAAC,GAAC,OAAIA,EAAEC,KAAIQ,SAASD,EAAEE,UAAxE,CAKA,IAAIC,EAASH,EAAEI,SAASC,SACpBC,EAAON,EAAEM,KAEL,IAAI5F,EAAEuB,MAAM,CACZL,cAAc,EACdC,WAAW,IAEdK,UAAUiE,GACVhE,WAAWmE,GAEdlE,OAAOjB,KAAKY,SAnDS,MAAAiD,GAAAW,GAAA,EAAAC,EAAAZ,EAAA,YAAAU,GAAA,MAAAI,EAAAb,QAAAa,EAAAb,SAAA,WAAAU,EAAA,MAAAC,GAwD3B,IAAMjE,EAAe,CACjBC,cAAc,EACdC,WAAW,GAEfV,KAAKI,mBAAqB,IAAIb,EAAEuB,MAAMN,GACzBO,UAAUO,EAAOX,eACjBK,WAAW,kBACxBhB,KAAKI,mBAAmBa,OAAOjB,KAAKY,OAEpCZ,KAAKK,iBAAmB,IAAId,EAAEuB,MAAMN,GACvBO,UAAUO,EAAOJ,aACjBF,WAAW,gBACxBhB,KAAKK,iBAAiBY,OAAOjB,KAAKY,mDAInB,IAAAwE,EAAApF,KAEfA,KAAKY,MAAQrB,EAAE6E,IAAI,mBAAmBiB,QAAQ,CAAC,QAAS,KAAO,IAE/D9F,EAAE+F,UAAU,6JAA8J,CACtKC,QAAS,GACTC,YAAa,6NAGblB,GAAI,mBACLmB,MAAMzF,KAAKY,OAMdZ,KAAKY,MAAM8E,GAAG,QAJG,SAACrB,GACde,EAAKxF,MAAM+F,iBAAiBtB,EAAEW,2CAQlC,OAAOY,EAAAC,EAAAC,cAAA,OAAKxB,GAAG,2BA/IuByB,oBCNxCC,EAAyB,CAAC,iBAAiB,WAAW,cAAc,MAAM,eAAe,aAAa,gBAAgB,OAAO,SAAS,SAAS,YAAY,iBAAiB,MAAM,YAAY,UAAU,gBAAgB,eAAe,gBAAgB,SAAS,aAAa,OAAO,WAAW,QAAQ,cAAc,gBAAiB,OAGvTC,cAIjB,SAAAA,EAAYrG,GAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAiG,IACrBpG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmG,GAAA9F,KAAAH,KAAMJ,KACDU,MAAQ,CACT4F,oBAAqB,GACrBC,oBAAqB,GACrBxF,cAAe,KACfyF,0BAA0B,EAC1BlF,YAAa,KACbmF,wBAAwB,EACxBC,cAAe,GACfC,gBAAiB,GACjBC,aAAc,GACdC,eAAgB,IAZC5G,yFAgBCU,GACnBP,KAAKM,MAAMV,QAAUW,EAAUmG,qBAE3B1G,KAAKM,MAAM8F,2BACVpG,KAAK2G,SAAS,CACVP,0BAA0B,EAC1BzF,cAAeJ,EAAUmG,qBAE7B1G,KAAKJ,MAAMgH,uBAAuBrG,EAAUmG,qBAG7C1G,KAAKM,MAAM+F,yBACVrG,KAAK2G,SAAS,CACVN,wBAAwB,EACxBnF,YAAaX,EAAUmG,qBAE3B1G,KAAKJ,MAAMiH,qBAAqBtG,EAAUmG,6DAMvCvB,GAAc,IAAAC,EAAApF,KAazB,MAAO,CACH4F,EAAAC,EAAAC,cAAA,SAAOgB,KAAK,WAAWxC,GAAIa,EAAMA,KAAMA,EAAM/C,MAAO+C,EAAM4B,QAbjD,SAACC,GACV,IAAIC,EAAU7B,EAAK9E,MAAM4F,oBAAoBgB,QAC7C,GAAGF,EAAGG,OAAOF,QACTA,EAAQG,KAAKjC,OACV,CACH,IAAIkC,EAAQJ,EAAQK,QAAQnC,GAC5B8B,EAAQM,OAAOF,EAAO,GAE1BjC,EAAKuB,SAAS,CACVT,oBAAqBe,OAKzBrB,EAAAC,EAAAC,cAAA,SAAO0B,QAASrC,GAAOA,GACvBS,EAAAC,EAAAC,cAAA,6DAIiB,IAAA2B,EAAAzH,KAgDrB,OAAO4F,EAAAC,EAAAC,cAAA,UAAQgB,KAAK,SAASC,QAAS,YA/CvB,WACX,IAAIW,EAAM,GAcV,OAb+B,MAA5BD,EAAKnH,MAAMK,gBACV+G,GAAO,6BAEkB,MAA1BD,EAAKnH,MAAMY,cACVwG,GAAO,2BAEmB,IAA3BD,EAAKnH,MAAMkG,eACVkB,GAAO,2BAGD,IAAPA,GACCC,MAAMD,GAEI,IAAPA,GAgCqCE,IA7BrC,WACP,IAAIC,EAAO,CACPC,iBAAkBL,EAAKnH,MAAM4F,oBAC7BvF,cAAe8G,EAAKnH,MAAMK,cAC1BO,YAAauG,EAAKnH,MAAMY,YACxB6G,UAAuC,IAA5BN,EAAKnH,MAAMgG,eAAqD,IAA9BmB,EAAKnH,MAAMiG,gBAAwB,KAAO,CAACyB,KAAMP,EAAKnH,MAAMgG,cAAe2B,OAAQR,EAAKnH,MAAMiG,iBAC3IC,aAAciB,EAAKnH,MAAMkG,aACzBC,eAAgBgB,EAAKnH,MAAMmG,eAC3ByB,YAAaT,EAAKnH,MAAM6F,qBAE5BgC,MAAM,uBAAwB,CAC1BC,OAAQ,OACRC,KAAMC,KAAKC,UAAUV,GACrBW,QAAS,CACHC,OAAU,mBACVC,eAAgB,sBAGrBC,KAAK,SAACC,GACH,OAAOA,EAASC,SAEnBF,KAAK,SAACC,GACkB,MAAlBA,EAASE,MACTnB,MAAMiB,EAASE,OAEdrB,EAAK7H,MAAMmJ,sBAAsBH,KAIYI,KAAtD,sFAGwB,IAAAC,EAAAjJ,KAC3BkJ,EAAyB,WACzBD,EAAKtC,SAAS,CACVP,0BAA0B,EAC1BC,wBAAwB,KAI5B8C,EAAuB,WACvBF,EAAKtC,SAAS,CACVN,wBAAwB,EACxBD,0BAA0B,KAI9BgD,EAAe,SAACC,EAAKjH,GACrB6G,EAAKtC,SAAL7G,OAAAwJ,EAAA,EAAAxJ,CAAA,GAAgBuJ,EAAMjH,KAGtBmH,EAA2B,SAACC,GAa5B,MAAO,CACH5D,EAAAC,EAAAC,cAAA,SAAOgB,KAAK,WAAWxC,GAAIkF,EAAMrE,KAAMqE,EAAMpH,MAAOoH,EAAMzC,QAbjD,SAACC,GACV,IAAIC,EAAUgC,EAAK3I,MAAM6F,oBAAoBe,QAC7C,GAAGF,EAAGG,OAAOF,QACTA,EAAQG,KAAKoC,OACV,CACH,IAAInC,EAAQJ,EAAQK,QAAQkC,GAC5BvC,EAAQM,OAAOF,EAAO,GAE1B4B,EAAKtC,SAAS,CACVR,oBAAqBc,OAKzBrB,EAAAC,EAAAC,cAAA,SAAO0B,QAASgC,GAAOA,GACvB5D,EAAAC,EAAAC,cAAA,aAIR,MAAO,CACHF,EAAAC,EAAAC,cAAA,6CAC4B,MAA5B9F,KAAKM,MAAMK,cACPiF,EAAAC,EAAAC,cAAA,KAAG2D,MAAO,CAAC/F,MAAO,QAAlB,uCAEAkC,EAAAC,EAAAC,cAAA,SAAIwC,KAAKC,UAAUvI,KAAKM,MAAMK,gBAEN,MAA5BX,KAAKM,MAAMK,cACPiF,EAAAC,EAAAC,cAAA,UAAQgB,KAAK,SAASC,QAASmC,GAA/B,2BAEAtD,EAAAC,EAAAC,cAAA,UAAQgB,KAAK,SAASC,QAASmC,GAA/B,yBAEJtD,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,2CAC0B,MAA1B9F,KAAKM,MAAMY,YACP0E,EAAAC,EAAAC,cAAA,KAAG2D,MAAO,CAAC/F,MAAO,QAAlB,qCAEAkC,EAAAC,EAAAC,cAAA,SAAIwC,KAAKC,UAAUvI,KAAKM,MAAMY,cAER,MAA1BlB,KAAKM,MAAMY,YACP0E,EAAAC,EAAAC,cAAA,UAAQgB,KAAK,SAASC,QAASoC,GAA/B,yBAEAvD,EAAAC,EAAAC,cAAA,UAAQgB,KAAK,SAASC,QAASoC,GAA/B,uBAEJvD,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAAA,SAAO0B,QAAQ,yBAAf,SACA5B,EAAAC,EAAAC,cAAA,SAAOgB,KAAK,OAAOxC,GAAG,wBAAwBoF,SAAU,SAAC1C,GAAD,OAAQoC,EAAa,gBAAiBpC,EAAGG,OAAO/E,UACxGwD,EAAAC,EAAAC,cAAA,SAAO0B,QAAQ,2BAAf,WACA5B,EAAAC,EAAAC,cAAA,SAAOgB,KAAK,OAAOxC,GAAG,0BAA0BoF,SAAU,SAAC1C,GAAD,OAAQoC,EAAa,kBAAmBpC,EAAGG,OAAO/E,UAC/E,IAA5BpC,KAAKM,MAAMgG,eAAqD,IAA9BtG,KAAKM,MAAMiG,gBAC9BX,EAAAC,EAAAC,cAAA,KAAG2D,MAAO,CAAC/F,MAAO,WAAlB,iDAEA,KAChBkC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAO0B,QAAQ,yBAAf,sCACA5B,EAAAC,EAAAC,cAAA,SAAOgB,KAAK,OAAOxC,GAAG,wBAAyBoF,SAAU,SAAC1C,GAAD,OAAQoC,EAAa,eAAgBpC,EAAGG,OAAO/E,UAC5E,IAA3BpC,KAAKM,MAAMkG,aACgBZ,EAAAC,EAAAC,cAAA,KAAG2D,MAAO,CAAC/F,MAAO,QAAlB,qCAEA,KAC5BkC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,sDACAyD,EAAyB,WACzBA,EAAyB,aACzBA,EAAyB,iEAK7B,IAAIlG,EAAIiF,KAAKqB,MAAMC,aAAaC,QAAQ,WACxC7J,KAAK2G,SAAStD,sDAId,IAAIyG,EAAYxB,KAAKC,UAAUvI,KAAKM,OACpCsJ,aAAaG,QAAQ,SAAUD,oCAG3B,IAAAE,EAAAhK,KACJ,OAAO4F,EAAAC,EAAAC,cAAA,YACF9F,KAAKiK,mCACNrE,EAAAC,EAAAC,cAAA,wCACAF,EAAAC,EAAAC,cAAA,OAAK2D,MAAO,CAACS,OAAQ,QAASC,SAAU,WACnCnE,EAAuB5B,IAAI,SAAAgG,GAAU,OAAIJ,EAAKK,eAAeD,MAElExE,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,qDACAF,EAAAC,EAAAC,cAAA,SAAO0B,QAAQ,kBAAf,sBACA5B,EAAAC,EAAAC,cAAA,SAAOgB,KAAK,OAAOxC,GAAG,iBAAkBoF,SAAU,SAAC1C,GAAD,OAAQgD,EAAKrD,SAAS,CAACF,eAAgBO,EAAGG,OAAO/E,WACnGwD,EAAAC,EAAAC,cAAA,WACC9F,KAAKsK,yBACN1E,EAAAC,EAAAC,cAAA,UAAQgB,KAAK,SAASC,QAAS/G,KAAKuK,yBAAyBC,KAAKxK,OAAlE,eACA4F,EAAAC,EAAAC,cAAA,UAAQgB,KAAK,SAASC,QAAS/G,KAAKyK,2BAA2BD,KAAKxK,OAApE,uBAlO+B+F,aCAtB2E,2LAEAvF,EAAMzB,EAAOiH,GAC1B,IAAIrJ,EAAS,GACbA,EAAO8F,KAAKxB,EAAAC,EAAAC,cAAA,KAAG2D,MAAO,CAACmB,mBAAoBlH,IAASyB,IAEpD,IAAIhD,EAAQwI,EAAWtI,OAAO,GAJQb,GAMxBW,EAAM0I,SANkB,GAAApJ,GAAA,EAAAC,OAAAC,EAAA,IAOtC,QAAAC,EAAAC,EAAeM,EAAMQ,KAArBZ,OAAAC,cAAAR,GAAAI,EAAAC,EAAAI,QAAAC,MAAAV,GAAA,EAA2B,KAAnBoB,EAAmBhB,EAAAQ,MACnB0I,EAAS,MAAQlI,EAAImI,SAASC,KAAO,IAAMpI,EAAIqI,SAASD,KAAO,IACnE1J,EAAO8F,KAAKxB,EAAAC,EAAAC,cAAA,KACRoF,aAAc,kBAAMlH,QAAQC,IAAI,OAChCkH,aAAc,kBAAMnH,QAAQC,IAAI,QAC/B6G,KAZ6B,MAAAjH,GAAApC,GAAA,EAAAC,EAAAmC,EAAA,YAAArC,GAAA,MAAAK,EAAAiC,QAAAjC,EAAAiC,SAAA,WAAArC,EAAA,MAAAC,GAgBtC,OAAOkE,EAAAC,EAAAC,cAAA,WAAM,GAAGsF,OAAO9J,qCAGlB,IAAAzB,EAAAG,KACDqL,EAAgB,SAAC/G,GACjB,OAAOzE,EAAKD,MAAM0B,OAAOyC,OAAOa,QAAQ0G,OAAO,SAAAjH,GAAC,OAAIA,EAAEU,UAAYT,IAAI,GAAGa,MAGzE/B,EAAQ,GACZ,GAAwB,MAArBpD,KAAKJ,MAAM0B,OAEV,IADA,IAAIC,EAAa,EACTgK,EAAI,EAAGA,EAAIvL,KAAKJ,MAAM0B,OAAOQ,WAAW0J,OAAQD,IAAK,CACzD,IAAIE,EAAOzL,KAAKJ,MAAM0B,OAAOQ,WAAWyJ,GACpCG,EAAmB,KAAMC,EAAkB,KAE3CD,EADI,GAALH,EACoB,iBAEAF,EAAcrL,KAAKJ,MAAM0B,OAAO4C,eAAeC,qBAAqBoH,EAAI,GAAGjH,IAG9FqH,EADDJ,GAAKvL,KAAKJ,MAAM0B,OAAOQ,WAAW0J,OAAS,EACxB,eAEAH,EAAcrL,KAAKJ,MAAM0B,OAAO4C,eAAeC,qBAAqBoH,GAAGjH,IAE7F,IAAIZ,EAAQ1D,KAAKJ,MAAMkD,SAASvB,GAChCA,IACA6B,EAAMgE,KAAKpH,KAAK4L,iBAAiBF,EAAmB,KAAOC,EAAiBjI,EAAO+H,IAI3F,OAAQ7F,EAAAC,EAAAC,cAAA,0CAEH1C,EACDwC,EAAAC,EAAAC,cAAA,UAAQgB,KAAK,SAASC,QAAS/G,KAAKJ,MAAMiM,oBAA1C,wBAnD0C9F,aCkHvC+F,cAtGX,SAAAA,EAAYlM,GAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8L,IACrBjM,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgM,GAAA3L,KAAAH,KAAMJ,KACDU,MAAQ,CACToG,mBAAoB,KACpB/F,cAAe,KACfO,YAAa,KACbG,gBAAiB,KACjBF,mBAAoB,EACpB4K,wBAAwB,GARPlM,gFAYRmF,GACbhF,KAAK2G,SAAS,CACVD,mBAAoB1B,mDAILA,GACnBhF,KAAK2G,SAAS,CACVhG,cAAeqE,iDAIFA,GACjBhF,KAAK2G,SAAS,CACVzF,YAAa8D,kDAIC1D,GAClB,IAAI0K,EAAMhM,KAAKM,MAAMa,mBAAqB,EACtCW,EAAa,GAF0BN,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAG3C,QAAAC,EAAAC,EAAaP,EAAOQ,WAApBC,OAAAC,cAAAR,GAAAI,EAAAC,EAAAI,QAAAC,MAAAV,GAAA,EAAgC,KAAxByK,EAAwBrK,EAAAQ,MAC5BN,EAAWsF,KAAKkB,KAAKqB,MAAMsC,KAJY,MAAApI,GAAApC,GAAA,EAAAC,EAAAmC,EAAA,YAAArC,GAAA,MAAAK,EAAAiC,QAAAjC,EAAAiC,SAAA,WAAArC,EAAA,MAAAC,GAM3C,IAAIwK,EAAM,CACNpK,WAAYA,EACZiC,OAAQuE,KAAKqB,MAAMrI,EAAOyC,QAC1BG,eAAgB5C,EAAO4C,eACvBvD,cAAeW,EAAOX,cACtBO,YAAcI,EAAOJ,aAEzBlB,KAAK2G,SAAS,CACVtF,gBAAiB6K,EACjB/K,mBAAoB6K,EACpBD,wBAAwB,qCAIvB1E,GAEL,IAAM8E,EAAS,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAM5O,GAAGA,EAAOX,QAAUnE,EAAO,CACvB,IAAI+E,EANU,WACd,IACIvH,EAAI,iBADS,mBACMwH,KAAKC,MAAsB,GAAhBD,KAAKE,YACvC,MAAO,IAAM1H,IAAMA,IAAMA,IAGjB2H,GAER,OADAL,EAAO/E,KAAKgF,GACLA,EAEX,OAAOD,EAAO9E,oCAGT,IAAAjC,EAAApF,KACDyM,EAA4BzM,KAAKM,MAAMyL,uBAAyB,OAAS,eACzEW,EAAmE,GAArC1M,KAAKM,MAAMyL,uBAAkC,OAAS,eACxF,OAAQnG,EAAAC,EAAAC,cAAA,WACLF,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,OAAK2D,MAAO,CAACkD,QAAQ,eAAgBC,YAAY,SAC7ChH,EAAAC,EAAAC,cAAC+G,EAAD,CACKlH,iBAAkB3F,KAAK2F,iBAAiB6E,KAAKxK,MAC7CW,cAAeX,KAAKM,MAAMK,cAC1BO,YAAalB,KAAKM,MAAMY,YACxBG,gBAAiBrB,KAAKM,MAAMe,gBAC5BF,mBAAoBnB,KAAKM,MAAMa,mBAC/B2B,SAAU9C,KAAK8C,YAGxB8C,EAAAC,EAAAC,cAAA,OAAK2D,MAAO,CAACkD,QAAQF,EAA2BK,MAAO,UACnDlH,EAAAC,EAAAC,cAACiH,EAAD,CACKrG,mBAAoB1G,KAAKM,MAAMoG,mBAC/BE,uBAAwB5G,KAAKkJ,uBAAuBsB,KAAKxK,MACzD6G,qBAAsB7G,KAAKmJ,qBAAqBqB,KAAKxK,MACrD+I,sBAAuB/I,KAAKgN,sBAAsBxC,KAAKxK,SAGhE4F,EAAAC,EAAAC,cAAA,OAAK2D,MAAO,CAACkD,QAAQD,EAA6BI,MAAO,UACtDlH,EAAAC,EAAAC,cAACmH,EAAD,CACKpB,mBAAoB,kBAAMzG,EAAKuB,SAAS,CAACoF,wBAAwB,KACjEzK,OAAQtB,KAAKM,MAAMe,gBACnByB,SAAU9C,KAAK8C,qBAnGpBiD,aCHEmH,QACW,cAA7B1N,OAAO0F,SAASiI,UAEe,UAA7B3N,OAAO0F,SAASiI,UAEhB3N,OAAO0F,SAASiI,SAASC,MACvB,2DCbNC,IAASC,OAAO1H,EAAAC,EAAAC,cAACyH,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjF,KAAK,SAAAkF,GACjCA,EAAaC","file":"static/js/main.89d16937.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\n\n\n// Leaflet sources from CDN\nimport './LeafletComponent.css';\nconst L = window.L;\n\nvar polyUtil = require('polyline-encoded');\n\n\n\nexport default class LeafletComponent extends Component {\n\n    mymap: any;\n    startLocationPopup: any;\n    endLocationPopup: any;\n\n    constructor(props) {\n        super(props);\n        this.startLocationPopup = null;\n        this.endLocationPopup = null;\n        this.state = { };\n    }\n\n    componentWillReceiveProps(nextProps) {\n\n        const popupOptions = {\n            closeOnClick: false,\n            autoClose: false\n        };\n\n        if(this.props.startLocation !== nextProps.startLocation) {\n            if(this.startLocationPopup != null) {\n                this.mymap.removeLayer(this.startLocationPopup)\n            }\n            this.startLocationPopup = new L.popup(popupOptions)\n                    .setLatLng(nextProps.startLocation)\n                    .setContent('Start location');\n            this.startLocationPopup.openOn(this.mymap);\n        }\n\n        if(this.props.endLocation !== nextProps.endLocation) {\n            if(this.endLocationPopup != null) {\n                this.mymap.removeLayer(this.endLocationPopup)\n            }\n            this.endLocationPopup = new L.popup(popupOptions)\n                    .setLatLng(nextProps.endLocation)\n                    .setContent('End location');\n            this.endLocationPopup.openOn(this.mymap);\n        }\n\n\n        if(this.props.findRouteResultRev != nextProps.findRouteResultRev) {\n\n            this.plotFindRoutesResponse(nextProps.findRouteResult);\n\n        }\n    }\n\n\n\n    plotFindRoutesResponse(result) {\n        let colorIndex = 0;\n        for(let directions of result.directions) {\n\n            let route = directions.routes[0];\n\n            for(let leg of route.legs) {\n\n                let legColor = this.props.getColor(colorIndex);\n                colorIndex++;\n\n                for(let s of leg.steps) {\n                    var polyline = polyUtil.decode(s.polyline.points, 5);\n\n                    var leaftletPolyline = new L.polyline(polyline, {color: legColor});\n\n                    this.mymap.addLayer(leaftletPolyline);\n\n                    leaftletPolyline.bindTooltip(\"TODO Polyline  tooltip content: \" + legColor);\n                }\n            }\n\n        }\n\n\n\n        // -----------------------------------------------------\n\n        let places = result.places;\n\n        console.log(places)\n        console.log(result.selectedPlaces.placesToVisitInOrder.map(e => e.id))\n\n        for(let r of places.results) {\n\n            let ord = result.selectedPlaces.placesToVisitInOrder;\n            if(result.selectedPlaces.placesToVisitInOrder.map(e => e.id).includes(r.place_id) == false) {\n                continue;\n            }\n\n\n            let latlng = r.geometry.location;\n            let name = r.name;\n\n            let p = new L.popup({\n                    closeOnClick: false,\n                    autoClose: false\n                })\n                .setLatLng(latlng)\n                .setContent(name);\n\n            p.openOn(this.mymap);\n        }\n\n\n        // -----------------------------------------------------\n        const popupOptions = {\n            closeOnClick: false,\n            autoClose: false\n        };\n        this.startLocationPopup = new L.popup(popupOptions)\n                    .setLatLng(result.startLocation)\n                    .setContent('Start location');\n        this.startLocationPopup.openOn(this.mymap);\n\n        this.endLocationPopup = new L.popup(popupOptions)\n                    .setLatLng(result.endLocation)\n                    .setContent('End location');\n        this.endLocationPopup.openOn(this.mymap);\n    }\n\n\n    componentDidMount(){\n//        this.mymap = L.map('leaftlet-map-id').setView([52.218994864793, 21.011712029573467], 17); // coordsy elki\n        this.mymap = L.map('leaftlet-map-id').setView([51.505, -0.09], 13);\n\n        L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw', {\n            maxZoom: 18,\n            attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\n                '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\n                'Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n            id: 'mapbox.streets'\n        }).addTo(this.mymap);\n\n        let onMapClick = (e) => {\n            this.props.handleClickOnMap(e.latlng);\n        }\n\n        this.mymap.on('click', onMapClick);\n    }\n\n\n    render() {\n        return <div id=\"leaftlet-map-id\" />;\n    }\n}\n\n","/* @flow */\nimport React, { Component } from 'react';\n\n\n// TODO - mapowanie place_code na postać dla użytkownika\nconst SUPPORTED_PLACES_CODES = ['amusement_park','aquarium','art_gallery','bar','beauty_salon','book_store','bowling_alley','cafe','casino','church','city_hall','clothing_store','gym','hair_care','laundry','meal_takeaway','movie_rental','movie_theater','museum','night_club','park','pharmacy','store','supermarket','travel_agency', 'zoo']\n\n\nexport default class FormComponent extends Component {\n    props: Props;\n    state: State;\n\n    constructor(props: Props){\n        super(props);\n        this.state = {\n            selectedPlacesTypes: [],\n            acceptedTravelModes: [],\n            startLocation: null,\n            awaitingForStartLocation: false,\n            endLocation: null,\n            awaitingForEndLocation: false,\n            startTimeHour: '',\n            startTimeMinute: '',\n            tripDuration: '',\n            placesKeywords: '',\n        }\n    }\n\n    componentWillReceiveProps(nextProps:  Props) {\n        if(this.state.props !== nextProps.lastMapClickCoords){\n\n            if(this.state.awaitingForStartLocation) {\n                this.setState({\n                    awaitingForStartLocation: false,\n                    startLocation: nextProps.lastMapClickCoords\n                });\n                this.props.notifyNewStartLocation(nextProps.lastMapClickCoords);\n            }\n\n            if(this.state.awaitingForEndLocation) {\n                this.setState({\n                    awaitingForEndLocation: false,\n                    endLocation: nextProps.lastMapClickCoords\n                });\n                this.props.notifyNewEndLocation(nextProps.lastMapClickCoords);\n            }\n        }\n\n    }\n\n    renderCheckbox(name: string) {\n        let handle = (ev) => {\n            let checked = this.state.selectedPlacesTypes.slice()\n            if(ev.target.checked) {\n                checked.push(name);\n            } else {\n                let index = checked.indexOf(name);\n                checked.splice(index, 1);\n            }\n            this.setState({\n                selectedPlacesTypes: checked\n            });\n        }\n        return [\n            <input type=\"checkbox\" id={name} name={name} value={name} onClick={handle}/>,\n            <label htmlFor={name}>{name}</label>,\n            <br />\n        ];\n    }\n\n    renderFindRoutesButton() {\n        let validate = () => {\n            let msg = '';\n            if(this.state.startLocation == null) {\n                msg += 'Set your start location\\n';\n            }\n            if(this.state.endLocation == null) {\n                msg += 'Set your end location\\n';\n            }\n            if(this.state.tripDuration == '') {\n                msg += 'Set you trip duration\\n';\n            }\n\n            if(msg != '') {\n                alert(msg)\n            }\n            return msg == ''; // no alert = validation ok\n        }\n\n        let send = () => {\n            let data = {\n                placesOfInterest: this.state.selectedPlacesTypes,\n                startLocation: this.state.startLocation,\n                endLocation: this.state.endLocation,\n                tripStart: this.state.startTimeHour == '' && this.state.startTimeMinute == '' ? null : {hour: this.state.startTimeHour, minute: this.state.startTimeMinute},\n                tripDuration: this.state.tripDuration,\n                placesKeywords: this.state.placesKeywords,\n                travelModes: this.state.acceptedTravelModes\n            }\n            fetch('/api/maps/find_route', {\n                method: 'POST',\n                body: JSON.stringify(data),\n                headers: {\n                      'Accept': 'application/json',\n                      'Content-Type': 'application/json'\n                },\n            })\n                .then((response) => {\n                    return response.json();\n                })\n                .then((response) => {\n                    if(response.error != null) {\n                       alert(response.error);\n                    } else {\n                        this.props.notifyFindRouteResult(response);\n                    }\n                });\n        }\n        return <button type=\"button\" onClick={() => {if(validate()) {send()}}}>Ok - find optimal route</button>\n    }\n\n    renderStartEndTripLocationsInput() {\n        let handleNewStartLocation = () => {\n            this.setState({\n                awaitingForStartLocation: true,\n                awaitingForEndLocation: false,\n            });\n        }\n\n        let handleNewEndLocation = () => {\n            this.setState({\n                awaitingForEndLocation: true,\n                awaitingForStartLocation: false,\n            });\n        }\n\n        let handleChange = (key, value) => {\n            this.setState({[key]: value});\n        }\n\n        let renderTravelModeCheckbox = (mode) => {\n            let handle = (ev) => {\n                let checked = this.state.acceptedTravelModes.slice()\n                if(ev.target.checked) {\n                    checked.push(mode);\n                } else {\n                    let index = checked.indexOf(mode);\n                    checked.splice(index, 1);\n                }\n                this.setState({\n                    acceptedTravelModes: checked\n                });\n            }\n            return [\n                <input type=\"checkbox\" id={mode} name={mode} value={mode} onClick={handle}/>,\n                <label htmlFor={mode}>{mode}</label>,\n                <br />\n            ];\n        }\n\n        return [\n            <p>Your trip start-point location: </p>,\n            this.state.startLocation == null ?\n                <p style={{color: 'red'}}>You havent set your start location!</p>\n                :\n                <p>{JSON.stringify(this.state.startLocation)}</p>\n            ,\n            this.state.startLocation == null ?\n                <button type=\"button\" onClick={handleNewStartLocation}>Set your start position</button>\n                :\n                <button type=\"button\" onClick={handleNewStartLocation}>Update start position</button>\n            ,\n            <br />,\n            <hr />,\n            <p>Your trip end-point location: </p>,\n            this.state.endLocation == null ?\n                <p style={{color: 'red'}}>You havent set your end location!</p>\n                :\n                <p>{JSON.stringify(this.state.endLocation)}</p>\n            ,\n            this.state.endLocation == null ?\n                <button type=\"button\" onClick={handleNewEndLocation}>Set your end position</button>\n                :\n                <button type=\"button\" onClick={handleNewEndLocation}>Update end position</button>\n            ,\n            <hr />,\n            <p>Your trip start time: </p>,\n            <label htmlFor=\"input_start_time_hour\">Hour:</label>,\n            <input type=\"text\" id=\"input_start_time_hour\" onChange={(ev) => handleChange('startTimeHour', ev.target.value)} />,\n            <label htmlFor=\"input_start_time_minute\">Minute:</label>,\n            <input type=\"text\" id=\"input_start_time_minute\" onChange={(ev) => handleChange('startTimeMinute', ev.target.value)} />,\n            (this.state.startTimeHour == '' && this.state.startTimeMinute == '' ?\n                            <p style={{color: 'orange'}}>You havent set start time(assuming right now)</p>\n                            :\n                            null),\n            <hr />,\n            <label htmlFor=\"input_duration_minute\">Expected trip duration in minutes:</label>,\n            <input type=\"text\" id=\"input_duration_minute\"  onChange={(ev) => handleChange('tripDuration', ev.target.value)}/>,\n            (this.state.tripDuration == '' ?\n                                        <p style={{color: 'red'}}>You havent set your trip duration</p>\n                                        :\n                                        null),\n            <hr />,\n            <p>Choose accepted modes of transportation: </p>,\n            renderTravelModeCheckbox('driving'),\n            renderTravelModeCheckbox('bicycling'),\n            renderTravelModeCheckbox('transit'),\n        ];\n    }\n\n    loadConfigFromLocalStorage() {\n        let s = JSON.parse(localStorage.getItem('config'));\n        this.setState(s)\n    }\n\n    saveConfigToLocalStorage() {\n        let stateJson = JSON.stringify(this.state);\n        localStorage.setItem('config', stateJson);\n    }\n\n    render(){\n        return <form>\n            {this.renderStartEndTripLocationsInput()}\n            <p>Choose places of interest: </p>\n            <div style={{height: '200px', overflow: 'scroll'}}>\n                {SUPPORTED_PLACES_CODES.map(place_code => this.renderCheckbox(place_code))}\n            </div>\n            <hr />\n            <p>Additional keywords for finding places: </p>\n            <label htmlFor=\"input_keywords\">Search for places:</label>\n            <input type=\"text\" id=\"input_keywords\"  onChange={(ev) => this.setState({placesKeywords: ev.target.value})}/>\n            <hr />\n            {this.renderFindRoutesButton()}\n            <button type=\"button\" onClick={this.saveConfigToLocalStorage.bind(this)}>Save config</button>\n            <button type=\"button\" onClick={this.loadConfigFromLocalStorage.bind(this)}>Load config</button>\n        </form>;\n    }\n}","/* @flow */\nimport React, { Component } from 'react';\n\ntype Props = {\n    notifyChangeScreen: Function,\n    result: FindRouteResult,\n}\n\nexport default class ResultPresenterComponent extends Component {\n\n    renderSingleStep(name, color, singleStep) {\n        let result = [];\n        result.push(<p style={{'background-color': color}}>{name}</p>);\n\n        let route = singleStep.routes[0];\n\n        let summary = route.summery;\n        for(let leg of route.legs) {\n            let letRes = \"   \" + leg.distance.text + \"(\" + leg.duration.text + \")\";\n            result.push(<p\n                onMouseEnter={() => console.log('xd')}\n                onMouseLeave={() => console.log('xd')} >\n                {letRes}\n            </p>);\n        }\n\n        return <div>{[].concat(result)}</div>;\n    }\n\n    render() {\n        let placeIdToName = (id) => {\n            return this.props.result.places.results.filter(e => e.place_id == id)[0].name;\n        }\n\n        let steps = [];\n        if(this.props.result != null) {\n            let colorIndex = 0;\n            for(let i = 0; i < this.props.result.directions.length; i++) {\n                let step = this.props.result.directions[i];\n                let previousStepName = null, currentStepName = null;\n                if(i == 0) {\n                    previousStepName = \"Start location\";\n                } else {\n                    previousStepName = placeIdToName(this.props.result.selectedPlaces.placesToVisitInOrder[i - 1].id);\n                }\n                if(i == this.props.result.directions.length - 1) {\n                    currentStepName = \"End location\";\n                } else {\n                    currentStepName = placeIdToName(this.props.result.selectedPlaces.placesToVisitInOrder[i].id);\n                }\n                let color = this.props.getColor(colorIndex);\n                colorIndex++;\n                steps.push(this.renderSingleStep(previousStepName + \"->\" + currentStepName, color, step));\n            }\n        }\n\n        return (<div>\n            Hello it is result presenter\n            {steps}\n            <button type=\"button\" onClick={this.props.notifyChangeScreen}>Search again</button>\n        </div>);\n    }\n\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport LeafletComponent from './components/LeafletComponent.js';\nimport FormComponent from './components/FormComponent.js';\nimport ResultPresenterComponent from './components/ResultPresenterComponent.js';\n\nexport type FindRouteResult = {\n    directions: Array<string>,\n    selectedPlaces: Array<any>,\n    places: any,\n    startLocation: any,\n    endLocation: any,\n    // TODO - dodać place details\n}\n\nclass App extends Component {\n\n    props: Props;\n    state: State;\n\n    constructor(props: Props){\n        super(props);\n        this.state = {\n            lastMapClickCoords: null,\n            startLocation: null,\n            endLocation: null,\n            findRouteResult: null,\n            findRouteResultRev: 0,\n            resultPresenterVisible: false,\n        }\n    }\n\n    handleClickOnMap(latlng) {\n        this.setState({\n            lastMapClickCoords: latlng\n        });\n    }\n\n    handleNewStartLocation(latlng) {\n        this.setState({\n            startLocation: latlng\n        });\n    }\n\n    handleNewEndLocation(latlng) {\n        this.setState({\n            endLocation: latlng\n        });\n    }\n\n    handleFindRouteResult(result: FindRouteResult) {\n        let rev = this.state.findRouteResultRev + 1;\n        let directions = [];\n        for(let d of result.directions) {\n            directions.push(JSON.parse(d))\n        }\n        let res = {\n            directions: directions,\n            places: JSON.parse(result.places),\n            selectedPlaces: result.selectedPlaces,\n            startLocation: result.startLocation,\n            endLocation:  result.endLocation\n        }\n        this.setState({\n            findRouteResult: res,\n            findRouteResultRev: rev,\n            resultPresenterVisible: true,\n        });\n    }\n\n    getColor(index) {\n        // wybrane takie bardziej kontrastujące\n        const colors = ['#e6194b', '#3cb44b', '#ffe119', '#4363d8', '#f58231', '#911eb4', '#46f0f0', '#f032e6', '#bcf60c', '#fabebe', '#008080', '#e6beff', '#9a6324', '#fffac8', '#800000', '#aaffc3', '#808000', '#ffd8b1', '#000075', '#808080', '#ffffff'];\n        let randomColor = () => {\n            const possible = \"0123456789abcdef\";\n            let r = () => possible[Math.floor(Math.random() * 16)];\n            return \"#\" + r() + r() + r();\n        }\n        if(colors.length <= index) {\n            let c = randomColor()\n            colors.push(c);\n            return c;\n        }\n        return colors[index];\n    }\n\n    render() {\n        let formComponentStyleDisplay = this.state.resultPresenterVisible ? 'none' : 'inline-block';\n        let resultPresenterStyleDisplay = this.state.resultPresenterVisible == false ? 'none' : 'inline-block';\n        return  <div>\n           <h2> Title to be done </h2>\n           <span>\n               <div style={{display:'inline-block', marginRight:'20px'}}>\n                   <LeafletComponent\n                        handleClickOnMap={this.handleClickOnMap.bind(this)}\n                        startLocation={this.state.startLocation}\n                        endLocation={this.state.endLocation}\n                        findRouteResult={this.state.findRouteResult}\n                        findRouteResultRev={this.state.findRouteResultRev}\n                        getColor={this.getColor}\n                        />\n               </div>\n               <div style={{display:formComponentStyleDisplay, width: '600px'}}>\n                   <FormComponent\n                        lastMapClickCoords={this.state.lastMapClickCoords}\n                        notifyNewStartLocation={this.handleNewStartLocation.bind(this)}\n                        notifyNewEndLocation={this.handleNewEndLocation.bind(this)}\n                        notifyFindRouteResult={this.handleFindRouteResult.bind(this)}\n                         />\n               </div>\n               <div style={{display:resultPresenterStyleDisplay, width: '600px'}}>\n                  <ResultPresenterComponent\n                       notifyChangeScreen={() => this.setState({resultPresenterVisible: false})}\n                       result={this.state.findRouteResult}\n                       getColor={this.getColor}\n                        />\n               </div>\n           </span>\n        </div>;\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}